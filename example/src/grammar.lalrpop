// https://en.wikipedia.org/wiki/List_of_mathematical_symbols_by_subject#Linear_algebra_and_geometry
use crate::TokenTree;

grammar;

match {
//=============================================================================
// Group
//=============================================================================
  "(", ")",
} else {
//=============================================================================
// Punct (Unicode)
//=============================================================================
  "⋅",  // Dot-product
  "⨯",  // Cartesian-product
  "⊤",  // Transpose
  "⊗",  // Tensor-product
  "∧",  // Exterion-norm
  "|",  // Vector-length
  "||", // Vector-norm
  "∘",  // Hadamard-product
  "⊘",  // Hadamard-division
  "⁻¹", // Inverse
//=============================================================================
// Punct (Ascii)
//=============================================================================
  "+", "-", "*", "/",
  "==", "<=", ">=", "!=",
  "and", "or",
  "&", "!",
  "?", ":",
  "=",
} else {
//=============================================================================
// Keywords
//=============================================================================
  "if", "then", "else",
} else {
//=============================================================================
// Literals and Identifiers
//=============================================================================
  r"[0-9]+" => Literal,
  r"[a-zA-Z]+" => Ident,
}

pub TokenStream: Vec<TokenTree<'input>> = TokenTree+;

TokenTree: TokenTree<'input> = {
  "(" <TokenTree+> ")" => TokenTree::Group(<>),
  Literal              => TokenTree::Literal(<>),
  Keyword              => TokenTree::Keyword(<>),
  Ident                => TokenTree::Ident(<>),
  Punct                => TokenTree::Punct(<>),
}

Keyword = { "if", "then", "else" }

Punct = {
  "⋅", "⨯", "⊤", "⊗", "∧", "|", "||", "∘", "⊘", "⁻¹",
  "+", "-", "*", "/", "==", "=", "&", "!", "?", ":" 
}
