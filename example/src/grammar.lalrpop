use crate::TokenTree;

grammar;

match {
  "if", "then", "else",
  "+", "-", "*", "/", "==", "&", "!", "?", ":",
  "(", ")",
} else {
  "=", 
  r"[0-9]+" => Literal,
  r"[a-zA-Z]+" => Ident,
}

pub TokenStream: Vec<TokenTree<'input>> = TokenTree+;

TokenTree: TokenTree<'input> = {
  "(" <TokenTree+> ")" => TokenTree::Group(<>),
  Literal              => TokenTree::Literal(<>),
  Keyword              => TokenTree::Keyword(<>),
  Ident                => TokenTree::Ident(<>),
  Punct                => TokenTree::Punct(<>),
}

Keyword = { "if", "then", "else" }

Punct = { "+", "-", "*", "/", "==", "=", "&", "!", "?", ":" }
